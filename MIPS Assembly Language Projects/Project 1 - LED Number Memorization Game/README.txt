Ben Isenberg - bji6@pitt.edu


My algorithm for the assignment works as follows:

First I keep a two counters going, $k1 keeps track of the round number
the user is on and $k0 keeps track of the card position to draw the 
next card on the LED simulator.  

I generate a random number, store it in a buffer, buf2, and then jump to a 
function that draws the number on screen by using branch statements to draw the correct number.  

I also print the correct answer onto the I/O window as the numbers are being
generated. 

Right before the number is drawn I jump to another function 
to check the value of $k0 and draw the number in the correct position.  

Then I proceed to draw the number and this process repeats itself until the 
right amount of cards has been drawn based on the current round number
(aka when $k0 = $k1).  

Then I jump to the User function which reads user input and stores it in buf1.  

I then proceed to compare the numbers the user inputted with those randomly 
generated by loading bytes from buf1 and buf2 and checking to see if they are equal.  

I keep loading new bytes until I reach the null byte at the end of the
user inputted string.  

If the user has made it this far without error then the next round begins and I reset 
buf1, buf2, $k0, and increment $k1.  

The game ends after 8 rounds, when $k1 = 9.  If any of the numbers don't match up or 
the user presses enter then I jump to the Lose function and draw frowny faces based 
on what round the user is on.  

If the user makes it through 8 rounds then I draw 8 smiley faces on screen.

Bugs:

The only bug in my program is that when the user wins the game the string "Correct Answer: " 
is printed in the I/O window one extra time even though the game is already over. 


