import java.io.*;
import java.util.*;
import javax.swing.*;
import java.awt.*;


/*
 * Enigma.java
 *
 * Created on Mar 20, 2010, 12:27:20 PM
 */

/*This program was created partly with the use of NetBeans.  It
is a GUI called the Enigma Machine and it is used in conjunction
with the ThreeRingDisk class to allow users to encrypt, decrypt,
and save messages with it.  It allows users to manually enter
messages, manually change the middle and inner rotors, and
if the automatic radio button is pressed the user can enter
a file name and the machine will place the data in that file
into the plain or cipher text area.*/


//by Ben Isenberg

public class Enigma extends javax.swing.JFrame {

	//ThreeRingDisk is added as a data field
	private ThreeRingDisk x;


   /** Creates new form Enigma */
    public Enigma() {

		//An object of ThreeRingDisk is made
        x = new ThreeRingDisk();

		//method creates GUI
        initComponents();


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        middleRotorLabel = new javax.swing.JLabel();
        innerRotorLabel = new javax.swing.JLabel();
        middleRotorDisplay = new javax.swing.JTextField();
        innerRotorDisplay = new javax.swing.JTextField();
        encryptButton = new javax.swing.JButton();
        decryptButton = new javax.swing.JButton();
        clearRight = new javax.swing.JButton();
        clearLeft = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cipherTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        plainTextArea = new javax.swing.JTextArea();
        plainLabel = new javax.swing.JLabel();
        cipherLabel = new javax.swing.JLabel();
        manual = new javax.swing.JRadioButton();
        automatic = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Enigma Machine");


        middleRotorLabel.setText("Middle Rotor");

        innerRotorLabel.setText("Inner Rotor");

		//The inner and middle rotor start out set with these characters
        innerRotorDisplay.setText("#GNUAHOVBIPWCJQXDKRYELSZFMT");
		middleRotorDisplay.setText("#EJOTYCHMRWAFKPUZDINSXBGLQV");

		encryptButton.setBackground(Color.CYAN);
        encryptButton.setText("Encrypt->");
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonHandler(evt);
            }
        });

		decryptButton.setBackground(Color.CYAN);
        decryptButton.setText("<-Decrypt");
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonHandler(evt);
            }
        });

		clearRight.setBackground(Color.CYAN);
        clearRight.setText("Clear->");
        clearRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearRightButtonHandler(evt);
            }
        });

		clearLeft.setBackground(Color.CYAN);
        clearLeft.setText("<-Clear");
        clearLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLeftButtonHandler(evt);
            }
        });

		saveButton.setBackground(Color.CYAN);
        saveButton.setText("Save Message");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonHandler(evt);
            }
        });

        cipherTextArea.setColumns(20);
        cipherTextArea.setLineWrap(true);
        cipherTextArea.setRows(5);
        cipherTextArea.setBackground(Color.GREEN);
        jScrollPane1.setViewportView(cipherTextArea);

        plainTextArea.setColumns(20);
        plainTextArea.setLineWrap(true);
        plainTextArea.setRows(5);
        plainTextArea.setBackground(Color.GREEN);
        jScrollPane2.setViewportView(plainTextArea);

        plainLabel.setFont(new java.awt.Font("Lucida Sans", 1, 11));
        plainLabel.setText("Plain Text");

        cipherLabel.setFont(new java.awt.Font("Lucida Sans", 1, 11));
        cipherLabel.setText("Cipher Text");

        buttonGroup1.add(manual);
        manual.setFont(new java.awt.Font("Lucida Sans", 1, 11)); // NOI18N
        manual.setSelected(true);
        manual.setText("Manual");
        manual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualButtonHandler(evt);
            }
        });

        buttonGroup1.add(automatic);
        automatic.setFont(new java.awt.Font("Lucida Sans", 1, 11)); // NOI18N
        automatic.setText("Automatic");
        automatic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automaticButtonHandler(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(clearLeft, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                                    .addComponent(clearRight, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                                    .addComponent(automatic, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(encryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(innerRotorLabel)
                            .addComponent(middleRotorLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(innerRotorDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                            .addComponent(middleRotorDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE))
                        .addGap(116, 116, 116)))
                .addGap(41, 41, 41))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(plainLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 328, Short.MAX_VALUE)
                .addComponent(cipherLabel)
                .addGap(147, 147, 147))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(278, Short.MAX_VALUE)
                .addComponent(manual, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(366, 366, 366))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(middleRotorLabel)
                    .addComponent(middleRotorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(innerRotorLabel)
                    .addComponent(innerRotorDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(encryptButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decryptButton)
                        .addGap(22, 22, 22)
                        .addComponent(clearRight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearLeft)
                        .addGap(33, 33, 33)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plainLabel)
                            .addComponent(cipherLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(manual)
                            .addComponent(automatic))))
                .addGap(58, 58, 58))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	//The encrypt button handler
    private void encryptButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonHandler

		//Middle rotor is set to the text in the label
		x.setMiddle(middleRotorDisplay.getText());

		//Inner rotor is set to the text in the label
		x.setInner(innerRotorDisplay.getText());

		//A string of the plain text message written in the plain text area
		String message = plainTextArea.getText();

		//An arraylist is created to hold the encrypted version of the message
		ArrayList<Character> code = new ArrayList<Character>();

		//Every character in the message is encrypted and added to the arraylist code
		for (int index = 0; index < message.length(); index++) {
			code.add(x.encrypt(message.charAt(index)));
		}

		//String variable used to hold to encrypted message so it can be displayed
		String s = Character.toString(code.get(0));

		//Adds every element from the code arraylist to the string s
		for (int index = 1; index < code.size(); index++) {
			s = s + Character.toString(code.get(index));
		}

		//encrypted message is displayed in the cipher text area
		cipherTextArea.setText(s);

		//rotors are reset
		x.eraseRotors();


    }//GEN-LAST:event_encryptButtonHandler

	//The decrypt button handler
    private void decryptButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonHandler

				//Middle rotor is set to the text in the label
				x.setMiddle(middleRotorDisplay.getText());

				//Inner rotor is set to the text in the label
				x.setInner(innerRotorDisplay.getText());

				//A string of the cipher text message written in the cipher text area
				String message = cipherTextArea.getText();

				//An arraylist is created to hold the decrypted version of the message
				ArrayList<Character> code = new ArrayList<Character>();

				//Every character in the message is decrypted and added to the arraylist code
				for (int index = 0; index < message.length(); index++) {
					code.add(x.decrypt(message.charAt(index)));
				}


				//String variable used to hold to decrypted message so it can be displayed
				String s = Character.toString(code.get(0));

				//Adds every element from the code arraylist to the string s
				for (int index = 1; index < code.size(); index++) {
					s = s + Character.toString(code.get(index));
				}

				//decrypted message is displayed in the plain text area
				plainTextArea.setText(s);

				//rotors are reset
				x.eraseRotors();


    }//GEN-LAST:event_decryptButtonHandler

	//Clear right button handler
    private void clearRightButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearRightButtonHandler

        //Clears the cipher text area
		cipherTextArea.setText("");

		//rotors are reset
		x.eraseRotors();


    }//GEN-LAST:event_clearRightButtonHandler

    //Clear left button handler
    private void clearLeftButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLeftButtonHandler

    	//Clears the plain text area
		plainTextArea.setText("");

		//rotors are reset
		x.eraseRotors();


    }//GEN-LAST:event_clearLeftButtonHandler

	//Save button handler
	//Allows user to save the plain or cipher message
    private void saveButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonHandler

		//Window is displayed asking if the user wants to save the plain text
		int userSave = JOptionPane.showConfirmDialog(null, "Do you want to save the plain text?", "Save", JOptionPane.YES_NO_OPTION);

		//PrintWriter is named to write the data to a file
		PrintWriter outputFile;


		//If the user clicks yes in window
		if (userSave == 0) {
			//User is prompted to type a file name to save the plain text as
			String fileName = JOptionPane.showInputDialog("File name?");

			//Handles any exceptions caused by PrintWriter writing data to a file
			try {
				outputFile = new PrintWriter(fileName);

				outputFile.println(plainTextArea.getText());

				//Output closed
				outputFile.close();
			}
			catch (Exception e) {

				//If there is an exception than this window is displayed
				JOptionPane.showMessageDialog(null, "Operation Cancelled", "ERROR", JOptionPane.ERROR_MESSAGE);

			}


		}

		//If user clicks no in window
		if (userSave == 1) {
			//User is prompted to type a file name to save the cipher text as
			String fileName = JOptionPane.showInputDialog("File name?");

			//Handles any exceptions caused by PrintWriter writing data to a file
			try {
				outputFile = new PrintWriter(fileName);

				outputFile.println(cipherTextArea.getText());

				//Output closed
				outputFile.close();
			}
			catch (Exception e) {

				//If there is an exception than this window is displayed
				JOptionPane.showMessageDialog(null, "Operation Cancelled", "ERROR", JOptionPane.ERROR_MESSAGE);

			}
		}




    }//GEN-LAST:event_saveButtonHandler

	//Manual radio button handler
    private void manualButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualButtonHandler

		//User gains the ability to manually enter text into text fields
		plainTextArea.setEditable(true);

		cipherTextArea.setEditable(true);



    }//GEN-LAST:event_manualButtonHandler

	//Automatic radio button handler
    private void automaticButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automaticButtonHandler

		//User loses the ability to enter text manually
		plainTextArea.setEditable(false);
		cipherTextArea.setEditable(false);

		//File and Scanner objects are created to read a file specified by the user
		File file;
		//Given an initial value
		Scanner inputFile = null;

		//User is prompted to type in a file name
		String inputFileName = JOptionPane.showInputDialog("File Name");

			//Handles exceptions
			try {

				file = new File(inputFileName);

				inputFile = new Scanner(file);

				//Tells the user that the file was found
				JOptionPane.showMessageDialog(null, "The file was found");

				//User is asked if it contains plain text
				int plainOrCipher = JOptionPane.showConfirmDialog(null, "Does the file contain plain text?", "?", JOptionPane.YES_NO_OPTION);

				//If the user clicks yes then the file is read and printed onto the plain text area
				if (plainOrCipher == 0) {

					while (inputFile.hasNext()) {
						plainTextArea.setText(inputFile.nextLine());
					}
				}

				//If the user clicks no then the file is read and printed onto the cipher text area
				if (plainOrCipher == 1) {

					while (inputFile.hasNext()) {
						cipherTextArea.setText(inputFile.nextLine());
					}
				}

				//If the user exits the window manual control is returned
				else {
					manual.doClick();
				}



			}
			//If the file cannot be found the user is told
			catch (FileNotFoundException e) {
				JOptionPane.showMessageDialog(null, "File not found.");

			}
			//If any other exception occurs manual control is returned
			catch (Exception e) {
				manual.doClick();
			}

		//manual control is returned after the data has been printed onto appropriate text area
		manual.doClick();

    }//GEN-LAST:event_automaticButtonHandler

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Enigma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton automatic;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel cipherLabel;
    private javax.swing.JTextArea cipherTextArea;
    private javax.swing.JButton clearLeft;
    private javax.swing.JButton clearRight;
    private javax.swing.JButton decryptButton;
    private javax.swing.JButton encryptButton;
    private javax.swing.JTextField innerRotorDisplay;
    private javax.swing.JLabel innerRotorLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton manual;
    private javax.swing.JTextField middleRotorDisplay;
    private javax.swing.JLabel middleRotorLabel;
    private javax.swing.JLabel plainLabel;
    private javax.swing.JTextArea plainTextArea;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

}
